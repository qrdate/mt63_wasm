TARGET = mt63
BUILD_DIR = build
DIST_DIR = dist

WASI_SYSROOT = /usr/share/wasi-sysroot
CC = clang++
CXX = clang++

SOURCES = \
src/native/mt63_wasm.cpp \
src/native/mt63/mt63base.cpp \
src/native/mt63/dsp.cpp

TARGET_ARCH = \
--target=wasm32-unknown-wasi \
--sysroot=$(WASI_SYSROOT) \
-mexec-model=reactor

CFLAGS = \
-Wall \
-Wno-unused-command-line-argument \
-Werror \
-Ofast \
-flto \
-fno-exceptions \
-ffunction-sections \
-fdata-sections

CXXFLAGS = \
$(CFLAGS) \
-fno-exceptions

LDFLAGS = \
-Wl,--strip-all \
-Wl,--lto-O3 \
-Wl,--export=_initialize

LDLIBS =


# Generate a list of object files from their source files
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(sort $(SOURCES:.cpp=.o))))
# Add the directories the source files are in to the search path
vpath %.cpp $(sort $(dir $(SOURCES)))

.PHONY: all
all: $(DIST_DIR)/$(TARGET).wasm $(DIST_DIR)/$(TARGET)-source.js

# Make emcc automatically generate dependency information
CXXFLAGS += -MMD -MF"$(@:%.o=%.d)"

$(DIST_DIR)/$(TARGET)-source.js: $(DIST_DIR)/$(TARGET).wasm
	echo "export const mt63Source = Buffer.from(\`" > $@
	base64 -w 80 $< >> $@
	echo "\`, 'base64');" >> $@
	echo "export declare const mt63Source: Buffer;" >> $(subst .js,.d.ts,$@)

$(DIST_DIR)/$(TARGET).wasm: $(OBJECTS) | $(DIST_DIR)
	$(LINK.o) $^ $(LDLIBS) -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR)
	$(COMPILE.cpp) $(OUTPUT_OPTION) $<

$(BUILD_DIR):
	mkdir -p $@

$(DIST_DIR):
	mkdir -p $@

# Include autogenerated dependency info
-include $(wildcard $(BUILD_DIR)/*.d)

.PHONY: clean
clean:
	$(RM) -r $(BUILD_DIR) $(DIST_DIR)
