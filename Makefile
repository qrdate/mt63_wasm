TARGETS = mt63-tx mt63-rx
BUILD_DIR = build
DIST_DIR = dist

WASM_SUFFIX = .wasm
SOURCE_SUFFIX = -source.js

WASI_SYSROOT = /usr/share/wasi-sysroot
CC = clang++
CXX = clang++

SOURCE_PATHS = \
src/native/

SOURCES = \
src/native/resampler.cpp \
src/native/mt63/mt63base.cpp \
src/native/mt63/dsp.cpp

TARGET_ARCH = \
--target=wasm32-unknown-wasi \
--sysroot=$(WASI_SYSROOT) \
-mexec-model=reactor

CFLAGS = \
-Wall \
-Wno-unused-command-line-argument \
-Werror \
-Ofast \
-flto \
-fno-exceptions \
-ffunction-sections \
-fdata-sections

CXXFLAGS = \
$(CFLAGS) \
-fno-exceptions

LDFLAGS = \
-Wl,--strip-all \
-Wl,--lto-O3 \
-Wl,--export=_initialize

LDLIBS =


# Generate a list of object files from their source files
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(sort $(SOURCES:.cpp=.o))))
# Always add the directories the source files are in to the search path
vpath %.cpp $(SOURCE_PATHS) $(sort $(dir $(SOURCES)))

.PHONY: all
all: $(addprefix $(DIST_DIR)/,$(addsuffix $(WASM_SUFFIX),$(TARGETS)))
all: $(addprefix $(DIST_DIR)/,$(addsuffix $(SOURCE_SUFFIX),$(TARGETS)))


# Rule to build .wasm files from our objects
$(DIST_DIR)/%$(WASM_SUFFIX): $(BUILD_DIR)/%.o $(OBJECTS) | $(DIST_DIR)
	$(LINK.o) $^ $(LDLIBS) -o $@

# RUle to build the base64 encoded wasm source files
$(DIST_DIR)/%$(SOURCE_SUFFIX): $(DIST_DIR)/%$(WASM_SUFFIX) | $(DIST_DIR)
	echo "export const source = Buffer.from(\`" > $@
	base64 -w 80 $< >> $@
	echo "\`, 'base64');" >> $@
	echo "export declare const source: Buffer;" >> $(subst .js,.d.ts,$@)


# Automatically generate dependency information
CXXFLAGS += -MMD -MF"$(@:%.o=%.d)"

# Keep around object after build
.PRECIOUS: $(BUILD_DIR)/%.o

$(BUILD_DIR)/%.o: %.cpp | $(BUILD_DIR)
	$(COMPILE.cpp) $(OUTPUT_OPTION) $<


$(BUILD_DIR):
	mkdir -p $@

$(DIST_DIR):
	mkdir -p $@


# Include autogenerated dependency info
-include $(wildcard $(BUILD_DIR)/*.d)

.PHONY: clean
clean:
	$(RM) -r $(BUILD_DIR) $(DIST_DIR)
